// <auto-generated />
using System;
using Infraestrutura.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfraEstrutura.Migrations
{
    [DbContext(typeof(EmpresaContexto))]
    [Migration("20250602013358_DeleteColunas")]
    partial class DeleteColunas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entidades.Cliente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("clientes");
                });

            modelBuilder.Entity("Entidades.Evento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Local")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantidadePessoas")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("idCliente")
                        .HasColumnType("int");

                    b.Property<int>("idFormaPagamento")
                        .HasColumnType("int");

                    b.Property<int>("idTipoEvento")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idCliente");

                    b.HasIndex("idFormaPagamento");

                    b.HasIndex("idTipoEvento");

                    b.ToTable("eventos");
                });

            modelBuilder.Entity("Entidades.FormaPagamento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("formasPagamento");
                });

            modelBuilder.Entity("Entidades.ItemVenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int?>("Servicoid")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("idEvento")
                        .HasColumnType("int");

                    b.Property<int>("idServico")
                        .HasColumnType("int");

                    b.Property<int>("idVenda")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Servicoid");

                    b.HasIndex("idEvento");

                    b.HasIndex("idServico");

                    b.HasIndex("idVenda");

                    b.ToTable("ItensVenda");
                });

            modelBuilder.Entity("Entidades.Servico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DuracaoHoras")
                        .HasColumnType("int");

                    b.Property<string>("NomeServico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValorPorPessoa")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("servicos");
                });

            modelBuilder.Entity("Entidades.TipoEvento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tiposEventos");
                });

            modelBuilder.Entity("Entidades.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Entidades.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("idFormaPagamento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idFormaPagamento");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("Entidades.Evento", b =>
                {
                    b.HasOne("Entidades.Cliente", "Cliente")
                        .WithMany("Eventos")
                        .HasForeignKey("idCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_Eventos");

                    b.HasOne("Entidades.FormaPagamento", "FormaPagamento")
                        .WithMany("Eventos")
                        .HasForeignKey("idFormaPagamento")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_FormaPagamento_Evento");

                    b.HasOne("Entidades.TipoEvento", "TipoEvento")
                        .WithMany("Eventos")
                        .HasForeignKey("idTipoEvento")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TipoEvento_Evento");

                    b.Navigation("Cliente");

                    b.Navigation("FormaPagamento");

                    b.Navigation("TipoEvento");
                });

            modelBuilder.Entity("Entidades.ItemVenda", b =>
                {
                    b.HasOne("Entidades.Servico", null)
                        .WithMany("Itens")
                        .HasForeignKey("Servicoid");

                    b.HasOne("Entidades.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("idEvento")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Evento_ItemVenda");

                    b.HasOne("Entidades.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("idServico")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Servico_ItemVenda");

                    b.HasOne("Entidades.Venda", "Venda")
                        .WithMany("Itens")
                        .HasForeignKey("idVenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Venda_ItemVenda");

                    b.Navigation("Evento");

                    b.Navigation("Servico");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Entidades.Venda", b =>
                {
                    b.HasOne("Entidades.FormaPagamento", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("idFormaPagamento")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FormaPagamento");
                });

            modelBuilder.Entity("Entidades.Cliente", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Entidades.FormaPagamento", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Entidades.Servico", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Entidades.TipoEvento", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Entidades.Venda", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
